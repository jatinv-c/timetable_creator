
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;

public class Main {

	static String EXCEL_DATA_FILE = "data.xlsx";

//    static String URL1 = "jdbc:mysql://localhost/<db1_name>";
	static String URL1 = "jdbc:mysql://localhost/BloodBankRegisterySystem";
	static String USERNAME1 = "root";
	static String PASSWORD1 = "root";
	static String URL1_COL1_KEYOWRD = "Target";

//    static String URL2 = "jdbc:mysql://localhost/<db2_name>";
	static String URL2 = "jdbc:mysql://localhost/BloodBankRegisterySystem";
	static String USERNAME2 = "root";
	static String PASSWORD2 = "root";
	static String URL2_COL1_KEYOWRD = "Source";

	// will be saved in project root directory
	static String FILENAME1 = "source";
	static String FILENAME2 = "target";

//    static String QUERY_STRING = "SELECT * from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME = \'<table_name>\'";
	static String QUERY_STRING_1 = "SELECT * from <table_name>"; // for database 1
	static String QUERY_STRING_2 = "SELECT * from <table_name>"; // for database 2
	
	static String REPORT_EXCEL_FILE = "Report";

	static List<List<String>> excelResult;

	public static void main(String[] args) {

		List<String[]> dataList = getTableDataFromExcel(EXCEL_DATA_FILE);

		excelResult = new ArrayList<>();

		// compare the tables
		for (int i = 0; i < dataList.size(); i++) {

			String[] data = dataList.get(i);

			System.out.println(data[0] + "       -      " + data[1]);

			boolean file1Created = generateDataFromQuery(URL1, USERNAME1, PASSWORD1,
					QUERY_STRING_1.replace("<table_name>", data[0]), FILENAME1 + i + ".csv");

			if (file1Created) {
				boolean file2Created = generateDataFromQuery(URL2, USERNAME2, PASSWORD2,
						QUERY_STRING_2.replace("<table_name>", data[1]), FILENAME2 + i + ".csv");

				if (file2Created) {

					if (compareCsvFiles(FILENAME1 + i + ".csv", FILENAME2 + i + ".csv", data[0], data[1])) {

						System.out.println("***********************************************");
						System.out.println("The 2 files are the SAME!!!!");
						System.out.println("***********************************************");

					} else {

						System.out.println("***********************************************");
						System.out.println("The 2 files are DIFFERNET!!!!");
						System.out.println("***********************************************");
					}
				}
			}

		}

		// create the excel file
		createExcelFile(excelResult, REPORT_EXCEL_FILE);

	}

	public static List<String[]> getTableDataFromExcel(String sourceFileName) {

		List<String[]> dataList = new ArrayList<>();

		try (Workbook wb = WorkbookFactory.create(new File(sourceFileName));) {

			Sheet sheetAt = wb.getSheetAt(0);

			for (Row row : sheetAt) {
				if (row.getRowNum() == 0) { // Ignore the first row containing the headers
					continue;
				}

				String[] arr = new String[2];

				String sourceTable = row.getCell(0).getStringCellValue();
				arr[0] = sourceTable;

				String targetTable = row.getCell(1).getStringCellValue();
				arr[1] = targetTable;

				dataList.add(arr);

			}

			wb.close();

		} catch (IOException e) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
		}
		return dataList;
	}

	public static boolean generateDataFromQuery(String url, String username, String password, String query,
			String filename) {

		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs;

		try {
			conn = DriverManager.getConnection(url, username, password);
			ps = conn.prepareStatement(query);
			rs = ps.executeQuery();

			return createCsvFromResultSet(rs, filename);
		} catch (SQLException e) {
			System.out.println("***********************************************");
			System.out.println("Error while getting data from database");
			System.out.println("Url : " + url + "Table : " + query);
			System.out.println("***********************************************");

		} finally {
			if (conn != null) {
				try {
					conn.close();
				} catch (SQLException e) {
					Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
					System.out.println("***********************************************");
					System.out.println("Error Closing Connection Object");
					System.out.println("Url : " + url + "Table : " + query);
					System.out.println("***********************************************");
				}
			}
			if (ps != null) {
				try {
					ps.close();
				} catch (SQLException e) {
					Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);
					System.out.println("***********************************************");
					System.out.println("Error Closing Prepared Statement Object");
					System.out.println("Url : " + url + "Table : " + query);
					System.out.println("***********************************************");
				}
			}
		}

		return false;
	}

	public static boolean createCsvFromResultSet(ResultSet rs, String filename) {

		String csvStr = "";
		List<String> colList = new ArrayList<>();

		try {
			// get column names
			ResultSetMetaData rsmd = rs.getMetaData();
			int col_count = rsmd.getColumnCount();
			for (int i = 1; i <= col_count; i++) {
				colList.add(rsmd.getColumnName(i));
			}

			csvStr += String.join(",", colList);
			csvStr += "\n";

			// get row data
			while (rs.next()) {
				for (int i = 0; i < col_count; i++) {
					String val = rs.getString(colList.get(i));
					csvStr += val;
					if (i < col_count - 2) {
						csvStr += ",";
					}
				}
				csvStr += "\n";
			}

			Files.write(Paths.get(filename), csvStr.getBytes());

		} catch (Exception e) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);

			System.out.println("***********************************************");
			System.out.println("Error saving the data to the file");
			System.out.println("File name : " + filename);
			System.out.println("***********************************************");

			return false;
		}

		return true;
	}

	public static boolean compareCsvFiles(String filename1, String filename2, String sourceTableName,
			String targetTableName) {

		// Excel headers - Source, Target, No of rows, No of cols, Match, Mismatch
		List<String> list = new ArrayList<>();
		list.add(sourceTableName);
		list.add(targetTableName);

		if (countLinesNew(filename1) != countLinesNew(filename2)) {

			list.add("-");
			list.add("-");
			list.add("NO");
			list.add("No of rows are different");
			return false;
		}

		try {
			List<String> linesFile1 = Files.readAllLines(Paths.get(new File(filename1).getAbsolutePath()),
					StandardCharsets.US_ASCII);
			List<String> linesFile2 = Files.readAllLines(Paths.get(new File(filename2).getAbsolutePath()),
					StandardCharsets.US_ASCII);

			for (int i = 0; i < linesFile1.size(); i++) {

				if (i == 0) {
					// check for keywords in column 1 at position 1
					if (!linesFile1.get(i).split(",")[0].equals(URL1_COL1_KEYOWRD)) {
						System.out.println("***********************************************");
						System.out.println("In URL 1 the keyword at col 1 position 1 is not " + URL1_COL1_KEYOWRD);
						System.out.println("***********************************************");

						list.add("-");
						list.add("-");
						list.add("NO");
						list.add("The keyword at col 1 position 1 is not \" + URL1_COL1_KEYOWRD");

						return false;
					}
					if (!linesFile2.get(i).split(",")[0].equals(URL2_COL1_KEYOWRD)) {
						System.out.println("***********************************************");
						System.out.println("In URL 2 the keyword at col 1 position 1 is not " + URL2_COL1_KEYOWRD);
						System.out.println("***********************************************");

						list.add("-");
						list.add("-");
						list.add("NO");
						list.add("The keyword at col 1 position 1 is not \" + URL2_COL1_KEYOWRD");

						return false;
					}

				} else if (!linesFile1.get(i).equals(linesFile2.get(i))) {

					String[] words_arr_1 = linesFile1.get(i).split(",");
					String[] words_arr_2 = linesFile2.get(i).split(",");

					System.out.println("***********************************************");
					System.out.println("Mismatch found in the row number " + (i + 1));
					System.out.println("***********************************************");

					for (int j = 0; j < words_arr_1.length; j++) {

						if (!words_arr_1[j].equals(words_arr_2[j])) {

							System.out.println("The value \'" + words_arr_1[j] + "\' does not match \'" + words_arr_2[j]
									+ "\' at column number " + (j + 1));

							list.add("-");
							list.add("-");
							list.add("NO");
							list.add("Mismatch found in row number " + (i + 1) + " and column number " + (j + 1));

							break;
						}
					}

					return false;
				}
			}

			list.add("" + linesFile1.size());
			list.add("" + linesFile1.get(0).split(",").length);
			list.add("YES");
			list.add("-");

		} catch (IOException e) {
			System.out.println("***********************************************");
			System.out.println("IOException while comparing the 2 files");
			System.out.println("***********************************************");
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);

		} catch (Exception e) {
			System.out.println("***********************************************");
			System.out.println("error while comparing the 2 files");
			System.out.println("***********************************************");
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);

		}

		excelResult.add(list);

		return true;
	}

	public static int countLinesNew(String filename) {
		InputStream is = null;
		try {
			is = new BufferedInputStream(new FileInputStream(filename));

			byte[] c = new byte[1024];

			int readChars = is.read(c);
			if (readChars == -1) {
				// bail out if nothing to read
				return 0;
			}

			// make it easy for the optimizer to tune this loop
			int count = 0;
			while (readChars == 1024) {
				for (int i = 0; i < 1024;) {
					if (c[i++] == '\n') {
						++count;
					}
				}
				readChars = is.read(c);
			}

			// count remaining characters
			while (readChars != -1) {
				for (int i = 0; i < readChars; ++i) {
					if (c[i] == '\n') {
						++count;
					}
				}
				readChars = is.read(c);
			}

			return count == 0 ? 1 : count;
		} catch (Exception e) {
			Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);

			System.out.println("***********************************************");
			System.out.println("Error counting the number of lines in the file");
			System.out.println("File name : " + filename);
			System.out.println("***********************************************");

		} finally {
			if (is != null) {
				try {
					is.close();
				} catch (Exception e) {
					Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, e);

					System.out.println("***********************************************");
					System.out.println("Error closing the InputStream object for the file");
					System.out.println("File name : " + filename);
					System.out.println("***********************************************");
				}
			}
		}

		return 0;
	}

	public static void createExcelFile(List<List<String>> excelData, String filename) {

		// Excel headers - Source, Target, No of rows, No of cols, Match, Mismatch
		final String[] headers = { "Source", "Target", "No of rows", "No of columns", "Match", "Mismatch" };
		       
		try {
			// create the excel workbook
			SXSSFWorkbook workbook = new SXSSFWorkbook();

			// create new sheet in the workbook
			SXSSFSheet sheet = workbook.createSheet("Monthwise Variance");

			//Header custom style
            Font headerFont = workbook.createFont();
            headerFont.setFontHeightInPoints((short) 12);
            headerFont.setBold(true);
            headerFont.setColor(IndexedColors.DARK_RED.getIndex());
            CellStyle headerCellStyle = sheet.getWorkbook().createCellStyle();
            headerCellStyle.setFont(headerFont);
            
			//red background cell
	        CellStyle redBgCellStyle = sheet.getWorkbook().createCellStyle();
	        redBgCellStyle.setFillForegroundColor(IndexedColors.RED.getIndex());
	        redBgCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
	        
			// to maintain row index	
			int rowNo = 0;

			// Create a new row in current sheet
			Row row = sheet.createRow(rowNo++);
			
			Cell cell;
			
			//Add headers
            for (int i = 0; i < headers.length; i++) {
                cell = row.createCell(i);

                //Set value to the cell
                cell.setCellValue(headers[i]);

                //set custom style to cell
                cell.setCellStyle(headerCellStyle);
            }
            
          //Add rows
            for (int i = 0; i < excelData.size(); i++) {
            	
            	List<String> rowItem = excelData.get(i);
            	
            	row = sheet.createRow(rowNo++);
            	
            	for (int j = 0; j < rowItem.size(); j++) {
            		
            		cell = row.createCell(j);
                    cell.setCellValue(rowItem.get(j));
                    
                    if (rowItem.get(4).equals("NO")) {
                    	cell.setCellStyle(redBgCellStyle);
					}
            	}
            }
			
			// write the workbook to file
			try (FileOutputStream out = new FileOutputStream(new File(filename + ".xlsx"))) {
				workbook.write(out);
			} catch (FileNotFoundException ex) {
				Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
			} catch (IOException ex) {
				Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
			} finally {
				workbook.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
			
		}	
	}
}
